name: Backend Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'auth-backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'auth-backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    
    # Service containers for PostgreSQL and Redis
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: auth-backend/requirements*.txt
      
      - name: Install dependencies
        working-directory: auth-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run linting
        working-directory: auth-backend
        run: |
          # Run flake8 for code quality
          flake8 core app --count --select=E9,F63,F7,F82 --show-source --statistics
          # Check for complexity and style (warnings only)
          flake8 core app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run type checking
        working-directory: auth-backend
        run: |
          mypy core --ignore-missing-imports --no-strict-optional
        continue-on-error: true
      
      - name: Run unit tests
        working-directory: auth-backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/auth_system_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-ci-at-least-32-chars
          JWT_ALGORITHM: HS256
          JWT_ISSUER: test-issuer
          JWT_AUDIENCE: test-audience
        run: |
          pytest -m unit -v --tb=short
      
      - name: Run integration tests
        working-directory: auth-backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/auth_system_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-ci-at-least-32-chars
          JWT_ALGORITHM: HS256
          JWT_ISSUER: test-issuer
          JWT_AUDIENCE: test-audience
        run: |
          pytest -m integration -v --tb=short
      
      - name: Run E2E tests
        working-directory: auth-backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/auth_system_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-ci-at-least-32-chars
          JWT_ALGORITHM: HS256
          JWT_ISSUER: test-issuer
          JWT_AUDIENCE: test-audience
        run: |
          pytest -m e2e -v --tb=short
      
      - name: Run all tests with coverage
        working-directory: auth-backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/auth_system_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-ci-at-least-32-chars
          JWT_ALGORITHM: HS256
          JWT_ISSUER: test-issuer
          JWT_AUDIENCE: test-audience
        run: |
          pytest --cov=core --cov=app --cov-report=term --cov-report=xml --cov-report=html -v
      
      - name: Check coverage threshold
        working-directory: auth-backend
        run: |
          # Extract coverage percentage from coverage report
          coverage report --fail-under=80
        continue-on-error: false
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: auth-backend/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true
      
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: auth-backend/htmlcov/
          retention-days: 30
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 80
        continue-on-error: true

  test-parallel:
    name: Run Tests in Parallel
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: auth-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run tests in parallel
        working-directory: auth-backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/auth_system_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-ci-at-least-32-chars
        run: |
          # Run tests in parallel with 4 workers
          pytest -n 4 -v

