version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      # Application
      - APP_NAME=${APP_NAME:-Auth System API}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      
      # API
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=8080
      
      # Database
      - DATABASE_URL=${DATABASE_URL}
      
      # Redis
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      
      # JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-auth-system-api}
      - JWT_ISSUER=${JWT_ISSUER:-auth-system-api}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5173}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Pagination
      - DEFAULT_PAGE_SIZE=${DEFAULT_PAGE_SIZE:-20}
      - MAX_PAGE_SIZE=${MAX_PAGE_SIZE:-100}
      
      # Rate Limiting
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      - LOGIN_RATE_LIMIT_PER_MINUTE=${LOGIN_RATE_LIMIT_PER_MINUTE:-5}
      
      # Email
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@authsystem.com}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME:-Auth System}
      - SEND_LOGIN_NOTIFICATIONS=${SEND_LOGIN_NOTIFICATIONS:-false}
      
      # URLs
      - API_BASE_URL=${API_BASE_URL:-http://localhost:8080}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      
      # Security
      - REQUIRE_EMAIL_VERIFICATION=${REQUIRE_EMAIL_VERIFICATION:-false}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
      - ACCOUNT_LOCKOUT_DURATION_MINUTES=${ACCOUNT_LOCKOUT_DURATION_MINUTES:-30}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-auth_system}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT_EXTERNAL:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

